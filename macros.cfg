#################################################################################
######################## General Macros - Syncraft X1	#########################
#################################################################################

##############################################################################
#### 		     		Mainsail required macros	  	  ####
##############################################################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : False ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 15.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 0.0   ; the value to retract while PAUSE
variable_cancel_retract  : 0.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 35.0  ; retract speed in mm/s
variable_unretract       : 0.0   ; the value to unretract while RESUME
variable_speed_unretract : 35.0  ; unretract speed in mm/s
variable_speed_hop       : 15.0  ; z move speed in mm/s
variable_speed_move      : 300.0 ; move speed in mm/s
variable_park_at_cancel  : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
gcode:

###############################################################################
#	Cancel Gcode
#	Macro executed whenever a print job is cancelled

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
	{% set X = params.X|default(320)|float %}
	{% set Y = params.Y|default(303)|float %}
	{% set Z = params.Z|default(340)|float %}
	{% set E = params.E|default(-25)|float %}
	SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=isprinting VALUE=0
	SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=was_enabled VALUE=0
    SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=afc VALUE=0
	TURN_OFF_HEATERS
	UPDATE_DELAYED_GCODE ID=report_temp DURATION=5
	M106 S0
	G92 E0
	G1 X{X} Y{Y} F18000
	G1 Z{Z} F3200
	G28 Z
	#FILAMENT_PULL
	{% if printer["gcode_macro PRIME_ROUTINE"].primed == 1 %}
		PURGE_NOZZLE
		G4 P12000
		FILAMENT_PULL
        M400
        G1 Y260 F12000
	{% endif %}
	SET_GCODE_VARIABLE MACRO=PRIME_ROUTINE VARIABLE=primed VALUE=0
	M82
	M400
	ZOFFSAVE
	CANCEL_PRINT_BASE
	M84
    
###############################################################################
#   Pause Macro

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE_BASE
    PARK_HEAD
    _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
  
###############################################################################
#   Resume Macro

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
	{% if printer['gcode_macro AUTO_FILAMENT_CHANGE'].afc == 1 %}
		#G1 X280 Y303 F18000
		#G1 X320
		SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=afc VALUE=0
		M109 S{printer['gcode_macro AUTO_FILAMENT_CHANGE'].target_temp}
		G92 E0
		G1 E750 F3500
		M400
		G92 E0
		G1 E70 F65
		G1 E68 F2000
		G1 Y260 F6000
		RESUME_BASE
		nozzle_idle
	{% else %}
		RESTORE_GCODE_STATE NAME=M600_state
		nozzle_idle
		RESUME_BASE
	{% endif %}
	
# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
  # ##### get user parameters or use default #####
  # {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  # {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  # {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  # {% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
  # ##### end of definitions #####
  # _CLIENT_EXTRUDE
  # RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  
###############################################################################
#   Pause Next Layer
#   Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]

[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"
  
################################################################################
#   Pause at layer
#   Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]

[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

################################################################################################
# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
###############################################################################

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = False if not macro_found
                     else False if client.use_custom_pos is not defined
                     else True  if client.use_custom_pos|lower == 'true'
                     else False %}
  {% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
  {% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
  {% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


####                        End of Mainsail macros                         ####
###############################################################################


###############################################################################
#	Start Gcode
#	This is the macro called in prior to starting a print job
#	Routines like bed level, z tilt and others necessary to be done on every print should be called inside this macro

[gcode_macro START_GCODE]

gcode:
	SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=isprinting VALUE=1
    UPDATE_DELAYED_GCODE ID=report_temp DURATION=0
    status_printing
	G92 E0
	#M204 S2500
	status_probing
	Z_TILT_ADJUST
	BED_TILT_CALIBRATE
	#BED_MESH_CALIBRATE
	PARK_HEAD
	#G1 X{X} Y{Y} F18000	Position set in macro PARK_HEAD
	#G1 Z{Z} F600
	#M204 S5000
###############################################################################

###############################################################################
#	End Gcode
#	This is the macro called in after completing a print job

[gcode_macro END_GCODE]

gcode:
	{% set X = params.X|default(280)|float %}
	{% set Y = params.Y|default(303)|float %}
	{% set Z = params.Z|default(340)|float %}
	{% set E = params.E|default(-25)|float %}
	SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=isprinting VALUE=0
	SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=was_enabled VALUE=0
    SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=afc VALUE=0
	UPDATE_DELAYED_GCODE ID=report_temp DURATION=5
	M104 S0
	M106 S0
	G92 E0
	G91
	G1 Z10 E-5 F2700
	G90
	#G1 E{E} F2750
	M400
	G1 X{X} Y{Y} E{E} F18000
	G1 Z{Z} F2500
	G28 Z
	#M82
	#M84
	PURGE_NOZZLE
	M400
	G4 P12000
	FILAMENT_PULL
	M400
	G1 Y260 F12000
	ZOFFSAVE
###############################################################################

# ###############################################################################
# #	Cancel Gcode
# #	Macro executed whenever a print job is cancelled

# [gcode_macro CANCEL_GCODE]

# gcode:
	# {% set X = params.X|default(280)|float %}
	# {% set Y = params.Y|default(303)|float %}
	# {% set Z = params.Z|default(340)|float %}
	# {% set E = params.E|default(-25)|float %}
	# SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=isprinting VALUE=0
    # SET_GCODE_VARIABLE MACRO=AUTO_FILAMENT_CHANGE VARIABLE=was_enabled VALUE=0
	# TURN_OFF_HEATERS
    # UPDATE_DELAYED_GCODE ID=report_temp DURATION=5
	# M106 S0
	# G92 E0
	# G1 X{X} Y{Y} F18000
	# G1 Z{Z} F3200
	# G28 Z
	# #FILAMENT_PULL
	# {% if printer["gcode_macro PRIME_ROUTINE"].primed == 1 %}
	    # PURGE_NOZZLE
	    # G4 P12000
	    # FILAMENT_PULL
	# {% endif %}
	# SET_GCODE_VARIABLE MACRO=PRIME_ROUTINE VARIABLE=primed VALUE=0
	# M82
	# M84
	# M400
	# ZOFFSAVE
# ##################################################################################

###############################################################################
#	Park Position
#	Move the printhead to the specified park position when pausing or other ocasions

[gcode_macro PARK_HEAD]

gcode:
	{% set X = params.X|default(320)|float %}
	{% set Y = params.Y|default(303)|float %}
	{% set Z = params.Z|default(10)|float %}
	{% set E = params.E|default(-75)|float %}
	#PAUSE
	G91
	G1 E-5.0 F3000
	G1 Z{Z} F700
	G90
	G1 X280 Y{Y} F18000
	M400
	G1 X{X} F18000
###############################################################################

###############################################################################
#	Filament Cold Pull
#	Waits until certain cooldown temp and pulls the filament a little to break
#	it clean, avoiding filament stretch inside the ProExtruder

[delayed_gcode f_pull]

gcode:
	G1 E-80 F1750
	M400
	M84

[gcode_macro FILAMENT_PULL]
gcode:
	#M83
	G1 E-75 F3000
	#TEMPERATURE_WAIT SENSOR=extruder  MAXIMUM=85
	#G1 E-80 F3200
	M400
	#M84
	M82
		
###############################################################################

###############################################################################
#	Remove Pro Extruder
#	Macro used to remove the Pro Extruder from print head

# [gcode_macro REMOVE_NOZZLE]

# gcode:
	# {% set X = params.X|default(150)|float %}
	# {% set Y = params.Y|default(150)|float %}
	# {% set Z = params.Z|default(340)|float %}
	# {% set E = params.E|default(-100)|float %}
	# {% set T = params.T|default(235)|float %}
	# M104 S{T}
	# {% if 'xy' in printer.toolhead.homed_axes %}
		# G1 X{X} Y{Y} F18000
	# {% else %}
		# G28
		# G1 X{X} Y{Y} F18000
	# {% endif %}
	# M109 S{T}
	# G92 E0
	# G1 E10 F600
	# G1 E{E} F1500
###############################################################################	

###############################################################################
#	Insert Pro Extruder
#	Macro used to insert the new Pro Extruder from print head

# [gcode_macro INSERT_NOZZLE]

# gcode:
	# {% set X = params.X|default(150)|float %}
	# {% set Y = params.Y|default(150)|float %}
	# {% set Z = params.Z|default(340)|float %}
	# {% set E = params.E|default(90)|float %}
	# {% set T = params.T|default(235)|float %}
	# M400
	# G4P5000
	# M104 S235
	# #G28
	# #G1 X{X} Y{Y} F18000
	# M109 S{T}
	# G92 E0
	# G1 E{E} F1000
	# G1 E120 F900
	# M400
	# G92 E0
	# G1 E-25 F2000
	# TURN_OFF_HEATERS
	# M84
	
###############################################################################

###############################################################################
#    Prime Blob/Line
#	 This macro cleans the nozzle prior to starting a print job

[gcode_macro PRIME_ROUTINE]
variable_primed: 0

gcode:
	# {% set X = params.X|default(100)|float %}
	# {% set Y = params.Y|default(100)|float %}
	# {% set Z = params.Z|default(5)|float %}
	# {% set E = params.E|default(100)|float %}
	# {% set EX = params.EX|default(50)|float %}
	G1 Z5 F700
	G92 E0
	G1 E50 F750
	G1 E100 F80
	G92 E0
	G1 E-3 F2500
	M400
	G4 P1000
	M204 S5000
	G1 Y260 F6000
	SET_GCODE_VARIABLE MACRO=PRIME_ROUTINE VARIABLE=primed VALUE=1

################################################################################

################################################################################
#    Purge Nozzle
#    This macro purges the melted plastic form the nozzle in the end of the
#    print, prior to filament retraction in order to avoid clogging on the
#    next print job

[gcode_macro PURGE_NOZZLE]

gcode:
    {% set X = params.X|default(280)|float %}
	{% set Y = params.Y|default(303)|float %}
    {% set E = params.E|default(100)|float %}
    #G1 X{X} Y{Y} F18000
	#M400
	G1 X320 F18000
    G1 E15 F100
    G92 E0
    G1 E-20 F3000

################################################################################
# Probe Z offset calibration script
# This script series of commands to automate a probe calibration routine

[gcode_macro PROBE_CALIBRATE]
rename_existing: PROBE_CALIBRATE_BASE
gcode:
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(90)|float %}
	{% set T = params.T|default(235)|float %}
	status_probing
	G28
	G1 Z{Z} F6000
	G1 X{X} Y{Y} F18000
	PROBE_CALIBRATE_BASE


# # Probe Z offset calibration script
# # This script series of commands to automate a probe calibration routine

# [gcode_macro CALIBRATE_NOZZLE_HEIGHT]

# gcode:
	# {% set X = params.X|default(150)|float %}
	# {% set Y = params.Y|default(150)|float %}
	# {% set Z = params.Z|default(5)|float %}
	# {% set E = params.E|default(90)|float %}
	# {% set T = params.T|default(235)|float %}
	# status_probing
	# G28
	# G1 Z{Z} F6000
	# G1 X{X} Y{Y} F18000
	# PROBE_CALIBRATE

#################################################################################

#################################################################################
# Endstop offset calibration script
# Home all axes, probe the nozzle and ovewrite the Z endstop position 

[gcode_macro CALIBRATE_Z_ENDSTOP]

gcode:

	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	G28
	G1 Z{Z} F6000
	G1 X{X} Y{Y} F18000
	Z_ENDSTOP_CALIBRATE

#################################################################################
# Filament Load Script - Generic
# This script loads filament, extrudes a little amount and retract for probing

[gcode_macro LOAD_FILAMENT]
variable_zoz: 0

gcode:
	{% set temp = printer.extruder.target|int %}
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(-25)|float %}
	{% set T = params.T|default(250)|float %}
	M104 S{T}
	G90
	{% if 'xy' in printer.toolhead.homed_axes %}
		G1 X{X} Y{Y} F18000
		G28 Z
	{% else %}
		G28
		G1 X{X} Y{Y} F18000
	{% endif %}
		M109 S{T}
		G92 E0
		EACCEL_GCODE
		M400
		G92 E0
		G1 E{E} F2750
		SET_GCODE_VARIABLE MACRO=PRIME_ROUTINE VARIABLE=primed VALUE=0
		TURN_OFF_HEATERS
		#G92 E0
		G4 P6000
		FILAMENT_PULL
		M400

###################################################################################

###################################################################################
# Filament Load Script - PACF HT15
# This script loads filament, extrudes a little amount and retract for probing

[gcode_macro LOAD_FILAMENT_CF]

gcode:
	
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(-75)|float %}
	{% set T = params.T|default(280)|float %}
	G28 Z0 F1500
	G28 X0 Y0
	G92 E0
	G1 X{X} Y{Y} F18000
	M109 S{T}
	G92 E0
	G1 E800 F2000
	G1 E860 F70
	M400
	M104 S0
	G92 E0
	G1 E-25 F1000
	M84
###################################################################################

###################################################################################
# Filament Unload Script - Generic
# This script heats the nozzle to a certain tempareture and unload the filament

[gcode_macro UNLOAD_FILAMENT]

gcode:
	
	# {% set X = params.X|default(150)|float %}
	# {% set Y = params.Y|default(150)|float %}
	# {% set Z = params.Z|default(5)|float %}
	# {% set E = params.E|default(35)|float %}
	# {% set T = params.T|default(250)|float %}
	#{% if 'xy' in printer.toolhead.homed_axes %}
	#	G1 X{X} Y{Y} F18000
	#	G28 Z
	#{% else %}
	#	G28
	#	G1 X{X} Y{Y} F18000
	#{% endif %}

	#M109 S{T}
	G92 E0 
	#G1 E25 F500
	G1 E-100 F1800
	G1 E-920 F3500
	M400
	M84
	M104 S0
###################################################################################

###################################################################################
# Filament Unload Script - PACF HT15
# This script heats the nozzle to a certain tempareture and unload the filament

[gcode_macro UNLOAD_EXTRUDER_SWITCH]

gcode:
	
	{% set X = params.X|default(150)|float %}
	{% set Y = params.Y|default(150)|float %}
	{% set Z = params.Z|default(5)|float %}
	{% set E = params.E|default(35)|float %}
	{% set T = params.T|default(250)|float %}
	G92 E0 
	G1 E-100 F1200
	G1 E-880 F3500
	M400
	M104 S0
###################################################################################

###################################################################################
# Wait for temp script
# This script waits for the temp specified by M109 but doesn't wait for PID stabilization

[gcode_macro M109]
rename_existing: M190.1
variable_tolerance: 1.0
gcode:
	{% set S = params.S|default(off) %}
	{% set R = params.R|default(off) %}
	{% if S != 'off' %}
		M104 S{S}
		#check_temp
        	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={S|float - tolerance}
    	{% elif R != 'off' %}
        	M109 S{R}
    	{% else %}
        	M104 S0
    	{% endif %}
		
###################################################################################

###################################################################################
#
#
[gcode_macro M104]
rename_existing: M104.1
gcode:

	{% set S = params.S|int %}
	{% set nozzle_max = printer.configfile.config.extruder.max_temp|int %}
	{% set nozzle_limiter = nozzle_max-5|int %}
	{% if S >= nozzle_limiter %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle_limiter}
		status_heating
	{% elif S != 0 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={S}
		status_heating
	{% else %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET={S}
		status_cooling
	{% endif %}


###################################################################################
[gcode_macro M140]
rename_existing: M140.1
gcode:
	{% set S = params.S|int %}
	{% set bed_max = printer.configfile.config.heater_bed.max_temp|int %}
	{% set bed_limiter = bed_max-5|int %}
	{% if S >= bed_limiter %}
		SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_limiter}
	{% else %}
		SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	{% endif %}

################################################################################### 

[gcode_macro M141]
#default_parameter_S: 0
#default_parameter_P: 0
gcode:
	{% set S = params.S|default(0)|float %}
	{% set R = params.R|default(0)|float %}
	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber_fan" target={S}

##################################################################################

# [gcode_macro Insert_ProExtruder]
# gcode:
	# FIRMWARE_RESTART

###################################################################################
# This macro calls TMC drivers log
#

[gcode_macro DUMPX]

gcode:
	DUMP_TMC STEPPER=stepper_x

####################################################################################

###################################################################################
# This macro calls TMC drivers log
#

[gcode_macro DUMPY]

gcode:
	DUMP_TMC STEPPER=stepper_y

####################################################################################

###################################################################################
# This macro calls TMC drivers log
#

[gcode_macro DUMPZ]

gcode:
	DUMP_TMC STEPPER=stepper_z

####################################################################################

####################################################################################
# This macro calls TMC drivers log
#

[gcode_macro DUMPE0]

gcode:
	DUMP_TMC STEPPER=extruder

####################################################################################

###################################################################################
# This macro calls TMC drivers log
#

[gcode_macro DUMPE1]

gcode:
	DUMP_TMC STEPPER=extruder1

####################################################################################

####################################################################################

### Search parameters macro

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

######################################################################################

######################################################################################
#
#	This macro transforms Octodash's babystepping command into incremental values
#
######################################################################################

[gcode_macro babystep]
#variable_current: 0.00
#default_parameter_S: 0.00

gcode:
     {% set S = params.S|float %}
#    {% set now = printer["gcode_macro babystep"].current|float %}   	 ########## get the current Z offset
#    
#    {% set new = now+S|float %} 					 ######### the sum of current Z offset to "S" value received from Octodash
#    
#    SET_GCODE_VARIABLE MACRO=babystep VARIABLE=current VALUE={new}  	 ########## Set the current Z offset to the new value 
#    
#    SET_GCODE_OFFSET MOVE=1 Z={new}	  				 ########## Move nozzle (bed) to the new offset position
#
#    #M118 Now value is: {now}
#    M118 New value is: {new}

     SET_GCODE_OFFSET MOVE=1 Z_ADJUST={S}


#####################################################################################
[gcode_macro BABYZ]
#default_parameter_S: 0
gcode:
   {% set S = params.S|default(2)|float %}
   SET_GCODE_OFFSET MOVE=1 Z={S}

#####################################################################################

[gcode_macro prntstats]

gcode:
    Status
    {% if printer.webhooks.state != 'Printing' %}

    	SET_LED LED=temp_leds RED=0 GREEN=0 BLUE=1 TRANSMIT=1

    {% else %}

	SET_LED LED=temp_leds RED=0 GREEN=1 BLUE=0 TRANSMIT=1

    {% endif %}

######################################################################################

######################################################################################
#
#	Save new Z Probe Offset from babystepping procedure right away if the printer
#       is idle or excecute the save command at the end of the print gcode
#
######################################################################################

[gcode_macro M500]
variable_isprinting: 0

gcode:
    
    Z_OFFSET_APPLY_PROBE						########### Apply offset to machine's probe value
    STATUS              					
    {% if printer.idle_timeout.state != 'Printing' %}			########### Check if no jobs is running in order to save the config file

	SAVE_CONFIG					 		########### Save the new offset and restart the firmware

    {% else %}
	SET_GCODE_VARIABLE MACRO=M500 VARIABLE=isprinting VALUE=1       ########### If a print jobs is running, set the variable to be excecuted at the end of the print gcode

    {% endif %}

[delayed_gcode save_z_offset]
gcode:
    SAVE_CONFIG

[gcode_macro ZOFFSAVE]

gcode:
    
    {% if printer["gcode_macro M500"].isprinting == 1 %}

	UPDATE_DELAYED_GCODE ID=save_z_offset DURATION=5

    {% endif %}

######################################################################################

######################################################################################
#
#	Neo pixel led color control
#
######################################################################################

# [gcode_macro check_temp]
# gcode:
  # {% set count = 1200 %} ### about 10 minutes count...
  # {% for c in range(count) %}
    # templedcolor_timer 
  # {% endfor %}  

# # Temperature reactive Neopixel using extruder actual temp...
# [gcode_macro templedcolor_timer]
# gcode:
  # {% if printer.extruder.target|int > 0 %}
    # {% if printer.extruder.temperature < printer.extruder.target %} 
      # {% set rosso = (printer.extruder.temperature / printer.extruder.target)|round(2) %}
      # {% set green = (1-(printer.extruder.temperature / printer.extruder.target))|round(2) %}
      # {% set blu = (1-(printer.extruder.temperature / printer.extruder.target))|round(2) %}
      # SET_LED LED=temp_leds RED={rosso} GREEN={green} BLUE={blu}
      # G4 P250
      # M118 B:{printer.heater_bed.temperature|round(1)} /{printer.heater_bed.target|round(1)} T0:{printer.extruder.temperature|round(1)} /{printer.extruder.target|round(1)}
    # {% endif %}  
  # {% else %}
    # M118 Extruder Heater off
  # {% endif %}

#######################################################################################

#######################################################################################

# [gcode_macro echoes]
# gcode:
	# M118 B:{printer.heater_bed.temperature|round(1)} /{printer.heater_bed.target|round(1)} T0:{printer.extruder.temperature|round(1)} /{printer.extruder.target|round(1)}
	
	
#######################################################################################

[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
        {% else %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
        {% endif %}
      {% endfor %}
   {% endfor %}
   
########################################################################################

[gcode_macro M900]
gcode:
	{% set svv = printer.save_variables.variables %}
	{% set S = params.S|default(0)|float %}
	{% set P = params.P|default(0)|float %}
	{% if P == 0.8 and S >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.3 EXTRUDER={svv.currentextruder}
		#RESPOND TYPE=command MSG="acertou miseravi!!"
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.05 EXTRUDER={svv.currentextruder}
		#RESPOND TYPE=command MSG="zerooouuuu!!"
	{% endif %}
	
	
#######################################################################################

#######################################################################################
#
#									Case Lights
#
#######################################################################################

[gcode_macro case_lights]
variable_state: 1
gcode:
	{% if printer["gcode_macro case_lights"].state == 1 %}
		SET_PIN PIN=case_light VALUE=0
		SET_GCODE_VARIABLE MACRO=case_lights VARIABLE=state VALUE=0
	{% else %}
		SET_PIN PIN=case_light VALUE=1
		SET_GCODE_VARIABLE MACRO=case_lights VARIABLE=state VALUE=1
	{% endif %}
[led_effect set_progress_leds]
leds:
    neopixel:progress_leds
autostart: true
frame_rate: 24
layers:
    static 0 0 top (1.0, 1.0, 1.0)

############################################################################

[led_effect set_nozzle_leds]
leds:
    neopixel:heater_leds
autostart: true
frame_rate: 24
layers:
    static 0 0 top (1.0, 1.0, 1.0)

############################################################################

[led_effect progress_bar]
leds:
    neopixel:progress_leds
autostart: false
frame_rate: 24
layers:
    progress  -2  0 subtract    ( 0, 0, 0),( 1, 0, 1)
    static     0  0 top    ( 1, 1, 1)

############################################################################
       
[led_effect nozzle_heating]
leds:
    neopixel:heater_leds
    neopixel:progress_leds
autostart: true
frame_rate: 24
heater: extruder
layers:
    heater 35 0 add (0,0,0),(1,1,1)
    breathing 3 0 top (1, 0.18, 0.0)

############################################################################

[led_effect nozzle_cooling]
leds:
    neopixel:heater_leds
autostart: false
frame_rate: 24
heater: extruder
layers:
    heater 50 0 add (0,0,0),(1,1,1)
    breathing 15 0 top (1, 0.3, 0.0)

############################################################################

[led_effect probing]
leds:
    neopixel:heater_leds
autostart: false
frame_rate: 24
endstops: probe
layers:
	homing	20	0	add	(0, 1, 0)
	static	0	0	top	(0, 0, 0)

############################################################################

[led_effect atc_leds]
leds:
    neopixel:heater_leds
autostart: false
frame_rate: 24
layers:
    linearfade 3 0 top (0.0, 1.0, 1.0),(0.0,0.0,1.0)
	
############################################################################

[gcode_macro status_probing]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=probing REPLACE=1 FADETIME=1.5


############################################################################

[gcode_macro status_printing]
gcode:
    #STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=progress_bar REPLACE=1 FADETIME=1.5

############################################################################

[gcode_macro status_heating]
gcode:
    #STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=nozzle_heating REPLACE=1 FADETIME=1.5

############################################################################
    
[gcode_macro status_cooling]
gcode:
    #STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=nozzle_cooling REPLACE=1 FADETIME=1.5

############################################################################

[gcode_macro nozzle_idle]
gcode:
    #STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=set_nozzle_leds REPLACE=1 FADETIME=1.5
    
############################################################################

[gcode_macro status_atc]
gcode:
    #STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=atc_leds REPLACE=1 FADETIME=1.5

############################################################################

[gcode_macro update_leds]
gcode:  
	{% if printer["gcode_macro AUTO_FILAMENT_CHANGE"].isprinting == 0 %}
		{% if printer.extruder.target == 0 %}
			{% if printer.extruder.temperature > 50.0 %}
				status_cooling
			{% else %}
				nozzle_idle
			{% endif %}
		{% endif %}
	{% endif %}
############################################################################

[delayed_gcode report_temp]
initial_duration: 15
gcode:
  update_leds
  UPDATE_DELAYED_GCODE ID=report_temp DURATION=15

############################################################################

#######################################################################################

