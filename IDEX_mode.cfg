# This file contains a configuration snippet for a dual extruder
# printer using dual carriages (an "IDEX" printer).

# See docs/Config_Reference.md for a description of parameters.

# Definition for the primary carriage (holding the primary extruder)
# and the definition for the primary extruder in main config file

########################################
# DUAL-CARRIAGES
########################################

[respond]

[gcode_macro DC_VARS]
# Offset coordinates for dual_carriage
variable_offset_x: -0.575 #-20.65 #-0.06  #-0.3 #was -0.15
variable_offset_y: -0.075 #-0.15 #was -0.15 #-0.3 #was0
variable_offset_z: 0  # 0.23
# Autopark parameters
## default autopark: 0:inactive - 1:active
variable_autopark: 1
variable_z_hop: 0
variable_movespeed: 6000
variable_feedrate: 18000
# Print mode: 0=independent, 1=copy, 2=mirror
variable_print_mode: 0
# HeatBed size
variable_bed_x_min: 0
variable_bed_x_max: 303
# Print cooling fans names
variable_fan0: 'fanX1'
variable_fan1: 'fanX2'
# Extruders temp
variable_offset_temp: 0
variable_active_carriage: 0
gcode:

## DUAL-CARRIAGES : FULL_CONTROL - AUTO-PARK

[gcode_macro T0]
variable_was_active: 0
variable_was_primed: 0
description: Activate T0 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    #{% if printer.dual_carriage is defined %}
    {% if dcvars.active_carriage == 1 %}
        M400
            #{% if dcvars.autopark == 1 %}
                # z-hop
        {% if dcvars.z_hop|float > 0.0 %}
            {% set max_z = printer.toolhead.axis_maximum.z|float %}
            {% set cur_z = printer.toolhead.position.z|float %}
            {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
            G91
            G1 Z{z_safe}
            G90
        {% endif %}
            # park tool
        SAVE_GCODE_STATE NAME=toolhead_state
         _PARK_TOOL
         #{% endif %}
        # toggle carriage
        ACTIVATE_EXTRUDER EXTRUDER=extruder
        SET_DUAL_CARRIAGE CARRIAGE=0
        SAVE_VARIABLE VARIABLE=active_carriage VALUE=0
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=active_carriage VALUE=0
        {% if printer.idle_timeout.state == "Printing" %}
            SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_active VALUE=1
            {% if printer['gcode_macro T0'].was_primed == 0 %}
                PRIME_ROUTINE
                M400
                SET_GCODE_VARIABLE MACRO=T0 VARIABLE=was_primed VALUE=1
            {% endif %}
        {% endif %}
            #SET_INPUT_SHAPER SHAPER_FREQ_X=45.6 SHAPER_FREQ_Y=82.8 SHAPER_TYPE_X=EI SHAPER_TYPE_Y=ZV

            #_NOZZLE_SCRUB
            #{% if dcvars.autopark == 1 and printer.idle_timeout.state != "Printing" %}
                #RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={dcvars.movespeed}
            #{% elif dcvars.autopark == 1 %}
        RESTORE_GCODE_STATE NAME=toolhead_state
            #{% endif %}
            # offsets
        SET_GCODE_OFFSET X=0 Y=0 Z=0 #MOVE=0 MOVE_SPEED={dcvars.movespeed}
            # print fan speed
        _SET_PRINT_FANS_SPEED
            # restore z
        {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
            G91
            G1 Z-{z_safe}
            G90
        {% endif %}
    {% endif %}
    #{% endif %}

[gcode_macro T1]
variable_was_active: 0
variable_was_primed: 0
description: Activate T1 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    #{% if printer.dual_carriage is defined %}
    {% if dcvars.active_carriage == 0 %}
        M400
            #{% if dcvars.autopark == 1 %}
                # z-hop
        {% if dcvars.z_hop|float > 0.0 %}
            {% set max_z = printer.toolhead.axis_maximum.z|float %}
            {% set cur_z = printer.toolhead.position.z|float %}
            {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
            G91
            G1 Z{z_safe}
            G90
        {% endif %}
                # park tool
        SAVE_GCODE_STATE NAME=toolhead_state
        _PARK_TOOL
            #{% endif %}
            # toggle carriage
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=1
        SAVE_VARIABLE VARIABLE=active_carriage VALUE=1
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=active_carriage VALUE=1
        {% if printer.idle_timeout.state == "Printing" %}
            SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_active VALUE=1
            {% if printer['gcode_macro T1'].was_primed == 0 %}
                PRIME_ROUTINE
                M400
                SET_GCODE_VARIABLE MACRO=T1 VARIABLE=was_primed VALUE=1
            {% endif %}
        {% endif %}
            #SET_INPUT_SHAPER SHAPER_FREQ_X=43.6 SHAPER_FREQ_Y=70.4 SHAPER_TYPE_X=EI SHAPER_TYPE_Y=EI
            
            #_NOZZLE_SCRUB
            #{% if dcvars.autopark == 1 and printer.idle_timeout.state != "Printing" %}
            #    RESTORE_GCODE_STATE NAME=toolhead_state MOVE=1 MOVE_SPEED={dcvars.movespeed}
            #{% elif dcvars.autopark == 1 %}
        RESTORE_GCODE_STATE NAME=toolhead_state
            #{% endif %}
            # offsets
        SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={dcvars.offset_z} #MOVE=0 MOVE_SPEED={dcvars.movespeed}
            # print fan speed
        _SET_PRINT_FANS_SPEED
            # restore z
        {% if (z_safe) is defined and printer.idle_timeout.state != "Printing" %}
            G91
            G1 Z-{z_safe}
            G90
        {% endif %}
    {% endif %}
    #{% endif %}

[gcode_macro _PARK_TOOL]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    #{% if printer.dual_carriage is defined %}
        SAVE_GCODE_STATE NAME=park_tool
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G90
        #{% if printer.toolhead.extruder == 'extruder' %}
        {% if printer.dual_carriage.carriage_0 == 'PRIMARY' %}
            {% set XPOS = printer.configfile.settings.stepper_x.position_endstop|float + 0.2 %}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.stepper_x.position_endstop} F{dcvars.feedrate}
        #{% elif (printer.toolhead.extruder) == 'extruder1' %}
        {% elif printer.dual_carriage.carriage_1 == 'PRIMARY' %}
            {% set XPOS = printer.configfile.settings.dual_carriage.position_max|float - 0.2 %}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.dual_carriage.position_endstop} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}

        RESTORE_GCODE_STATE NAME=park_tool
    #{% endif %}

[gcode_macro _NOZZLE_SCRUB]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined %}
        G90
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set XPOS = printer.configfile.config.stepper_x.position_endstop|float + 1.0 %}
            {% set XPOS1 = printer.configfile.config.stepper_x.position_endstop|float + 15.0 %}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.stepper_x.position_endstop} F{dcvars.feedrate}
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            {% set XPOS = printer.configfile.config.dual_carriage.position_endstop|float - 1.0 %}
            {% set XPOS1 = printer.configfile.config.dual_carriage.position_endstop|float - 15.0 %}
            G1 X{XPOS} F{dcvars.feedrate}
            G1 X{XPOS1} F{dcvars.feedrate}
            G1 X{XPOS} F{dcvars.feedrate}
            #G1 X{printer.configfile.config.dual_carriage.position_endstop} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
    {% endif %}

## DUAL-CARRIAGES : MODES ACTIVATION

[gcode_macro M605]
description: Set the dual-carriages mode
gcode:
    {% set mode = params.S|default(0)|int %}
    {% set offset_temp = params.R|default(0)|float %}
    #{% if printer.dual_carriage is defined %}
    {% if (mode) == 0 %}
         SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=0
        #MODE_FULL_CONTROL
    {% elif (mode) == 1 %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=1
        #MODE_FULL_CONTROL
    {% elif (mode) == 2 %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=print_mode VALUE=2
    #{% elif (mode) == 2 %}
    #        MODE_DUPLICATION R={offset_temp}
    #    {% elif (mode) == 3 %}
    #        MODE_MIRRORED R={offset_temp}
    #    {% endif %}
    #    G1 F3000
    {% endif %}
    
## DUAL-CARRIAGES : PRINT FANS MANAGEMENT
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X75 F24000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X225
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0 F24000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X300
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

[gcode_macro M106]
#rename_existing: M106.1
description: Override "M106" to allow multiple extruders.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
    {% if (params.P) is defined %}
        {% set P_fan = dcvars.fan0 if (params.P)|int == 0 else dcvars.fan1 %}
        SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
    {% else %}
    #{% elif printer.dual_carriage is defined %}
        _SET_PRINT_FANS_SPEED SPEED={fan_speed}
    {% endif %}
    
[gcode_macro M107]
#rename_existing: M107.1
description: Override "M107" to allow multiple extruders.
gcode:
    M106 S0
    
[gcode_macro _SET_PRINT_FANS_SPEED]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        # read print fan speed from active extruder
        {% set fan0_speed = printer["fan_generic " + dcvars.fan0].speed|float %}
        {% set fan1_speed = printer["fan_generic " + dcvars.fan1].speed|float %}
        {% set fan_speed = [fan0_speed, fan1_speed]|max %}
    {% endif %}
    {% if dcvars.active_carriage == "BOTH" %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% elif dcvars.active_carriage == 0 %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% elif dcvars.active_carriage == 1 %}
        SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
        SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}
    {% endif %}

## DUAL-CARRIAGES : HEATERS MANAGEMENT
    
[gcode_macro M104]
variable_isprinting: 0
rename_existing: M104.1
description: Override "M104" to allow multiple extruders to be synchronized.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(3)|int %}
    #{% if dcvars.active_carriage == 0 %}
    {% if tool == 0 %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
    {% elif tool == 1 %}
        SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
    {% else %}
        {% if dcvars.active_carriage == 0 %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
        {% else %}
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
        {% endif %}
    {% endif %}
    {% if dcvars.print_mode != 0 %}
        _SYNC_EXTRUDERS_TEMP
    {% endif %}

[gcode_macro M109]
#variable_tolerance: 3.0
rename_existing: M109.1
description: Override "M109" to allow multiple extruders to be synchronized.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp = params.S|default(0)|float %}
    {% set tool = params.T|default(3)|int %}
    {% set tolerance = params.TOLERANCE|default(8)|int %}
    #{% set heater = params.H|default(extruder)|string %}
    {% if tool == 0 %}
        {% set heater = "extruder" %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
    {% elif tool == 1 %}
        {% set heater = "extruder1" %}
         SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
    {% else %}
        {% if dcvars.active_carriage == 0 %}
        {% set heater = "extruder" %}
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
        {% else %}
        {% set heater = "extruder1" %}
            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={temp}
        {% endif %}
    {% endif %}
    {% if dcvars.print_mode != 0 %}
        _SYNC_EXTRUDERS_TEMP
    {% endif %}
    M400
    TEMPERATURE_WAIT SENSOR={heater} MINIMUM={temp - tolerance}

    #{% set heater = "extruder" %}
    #{% endif %}

[gcode_macro _SYNC_EXTRUDERS_TEMP]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set temp1 = printer.extruder.target|float %}
    {% set temp2 = printer.extruder1.target|float %}
    {% if dcvars.active_carriage == 0%}
       M104.1 T1 S{temp1} 
    {% else %}
        M104.1 T0 S{temp2}
    {% endif %}

[gcode_macro MANUAL_Z_IDEX_CALIBRATE]
gcode:
    {% set offset = printer.configfile.config.probe.z_offset|float %}
    G28
    G1 Z8 F12000
    status_probing
    z_tilt_adjust
    G1 Z8 F2000
    G1 X150 Y150 F12000
    PROBE
    G1 Z0 F1000
    PAUSE_BASE
    _PARK_TOOL
    SET_DUAL_CARRIAGE CARRIAGE=1
    G1 X150 Y150 F12000
    G1 Z0 F300
    PAUSE_BASE
    _PARK_TOOL
    SET_DUAL_CARRIAGE CARRIAGE=0
